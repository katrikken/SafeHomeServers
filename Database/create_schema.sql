-- TABLE OF USERS AND PASSWORDS
CREATE TABLE USER_CREDENTIALS(
  USER_LOGIN CHARACTER VARYING (15) NOT NULL
	PRIMARY KEY,

  USER_PASSWORD CHARACTER VARYING(15) NOT NULL
);

--INSERTS A ROW WITH NEW USER DATA OR CHANGES THE EXISTING ROW.
CREATE PROCEDURE ADD_USER_CREDENTIALS(
  U_LOGIN USER_CREDENTIALS.USER_LOGIN%TYPE, -- USER LOGIN
  U_PASSWORD USER_CREDENTIALS.USER_PASSWORD%TYPE -- USER PASSWORD
)
AS
BEGIN
  INSERT INTO USER_CREDENTIALS(
      USER_LOGIN,
      USER_PASSWORD
      ) 
    VALUES(
      U_LOGIN,
      U_PASSWORD
      );
  EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      UPDATE USER_CREDENTIALS
	  SET USER_PASSWORD=U_PASSWORD
	  WHERE USER_LOGIN=U_LOGIN;
END ADD_USER_CREDENTIALS;
/

--DELETES THE ROW WITH USER DATA.
CREATE PROCEDURE DELETE_USER_CREDENTIALS(
  U_LOGIN USER_CREDENTIALS.USER_LOGIN%TYPE -- USER LOGIN
)
AS
BEGIN
  DELETE FROM USER_CREDENTIALS U 
    WHERE U_LOGIN=U.USER_LOGIN;
	
END DELETE_USER_CREDENTIALS;
/


COMMIT;


-- RETURNS TRUE IF A USER EXISTS WITH THE GIVEN PASSWORD.
CREATE FUNCTION VALIDATE_USER_CREDENTIALS(
    U_LOGIN USER_CREDENTIALS.USER_LOGIN%TYPE, -- USER LOGIN
    U_PASSWORD USER_CREDENTIALS.USER_PASSWORD%TYPE -- USER PASSWORD
  ) RETURN INTEGER  -- 1 IF THE DATA ARE VALID, 0 OTHERWISE
AS
  U_COUNT NUMBER(1,0);
BEGIN
  SELECT COUNT(*) INTO U_COUNT
	FROM USER_CREDENTIALS UC
	 WHERE UC.USER_LOGIN = U_LOGIN AND UC.USER_PASSWORD = U_PASSWORD; 

  RETURN U_COUNT;
END;
/

-- TABLE OF USERS' AUTHORIZATION TOKENS
CREATE TABLE USER_TOKENS(
  USER_LOGIN CHARACTER VARYING (15) NOT NULL,
  
  CONSTRAINT UT_USER_LOGIN 
    FOREIGN KEY(USER_LOGIN)
	  REFERENCES USER_CREDENTIALS(USER_LOGIN)
	    ON DELETE CASCADE,

  USER_TOKEN CHARACTER VARYING(40) NOT NULL
    CONSTRAINT UT_USER_TOKEN
      UNIQUE
);

COMMIT;

--INSERTS A ROW WITH NEW USER TOKEN OR CHANGES THE TOKEN IF THE ROW EXISTS.
CREATE PROCEDURE ADD_USER_TOKEN(
  U_LOGIN USER_TOKENS.USER_LOGIN%TYPE, -- USER LOGIN
  U_TOKEN USER_TOKENS.USER_TOKEN%TYPE -- USER TOKEN
)
AS
BEGIN
  DELETE FROM USER_TOKENS UT 
    WHERE U_LOGIN = UT.USER_LOGIN; -- DELETE PREVIOUS TOKENS.
	
  INSERT INTO USER_TOKENS(
      USER_LOGIN,
      USER_TOKEN
      ) 
    VALUES(
      U_LOGIN,
      U_TOKEN
      );
  EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
      RAISE_APPLICATION_ERROR(
      00001, 
      'THE TOKEN IS NOT UNIQUE!'
      );
END ADD_USER_TOKEN;
/

-- VALIDATES USER TOKEN.
CREATE FUNCTION VALIDATE_USER_TOKEN(
    U_LOGIN USER_TOKENS.USER_LOGIN%TYPE, -- USER LOGIN
    U_TOKEN USER_TOKENS.USER_TOKEN%TYPE -- USER TOKEN
  ) RETURN INTEGER  -- 1 IF THE DATA ARE VALID, 0 OTHERWISE
AS
  U_COUNT NUMBER(1,0);
BEGIN
  SELECT COUNT(*) INTO U_COUNT
	FROM USER_TOKENS UT
	 WHERE UT.USER_LOGIN = U_LOGIN AND UT.USER_TOKEN = U_TOKEN;
  
  RETURN U_COUNT;
END;
/

-- RETURNS THE USER, WHICH OWNS THE TOKEN.
CREATE FUNCTION GET_USER_BY_TOKEN(
    U_TOKEN USER_TOKENS.USER_TOKEN%TYPE -- USER TOKEN
  ) RETURN USER_TOKENS.USER_LOGIN%TYPE  -- USER LOGIN
AS
  RETVAL USER_TOKENS.USER_LOGIN%TYPE;
BEGIN
  SELECT USER_LOGIN INTO RETVAL
	FROM USER_TOKENS UT
	 WHERE UT.USER_TOKEN = U_TOKEN;
  
  RETURN RETVAL;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN '';
END;
/

COMMIT;
